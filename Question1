#given parameters
alpha = 0.055 # contractual interest rate
T = 5 # maturity
P_c = 103 # Call Price
F = float(input('')) #Please enter the number of Face value
print('F = {}'.format(F))
r = float(input('')) #Please enter the number of interest rate
print('r = {}'.format(r))

def Plain_Vanila_Bond_price(alpha,T,F,r):
    C = F*alpha #coupon payment
    Bond_Price = 0
    for i in range(1,T+1):
        Bond_Price += C/(1+r)**i
    Bond_Price += F/(1+r)**T    
    Bond_Price = round(Bond_Price,2)
    return Bond_Price
    
print('Bond_Price = {}'.format(Plain_Vanila_Bond_price(alpha,T,F,r)))
    
import numpy as np
def binomial_model(N, S0, u, r, K,F):
    """
    N = number of binomial iterations
    S0 = initial stock price
    u = factor change of upstate
    r = risk free interest rate per annum
    K = strike price
    """
    d = 1 / u
    p = (1 + r - d) / (u - d)
    q = 1 - p
    alpha = 0.055
    C = F*alpha
    P_C = 103
    # = a*np.exp(b*j)
    # make stock price tree
    stock = np.zeros([N + 1, N + 1])
    for i in range(N + 1):
        for j in range(i + 1):
            stock[j, i] = S0 * (u ** (i - j)) * (d ** j)

    # Generate option prices recursively
    option = np.zeros([N + 1, N + 1])
    option[:, N] = np.minimum(P_C, F+C)
    for i in range(N - 1, -1, -1):
        for j in range(0, i + 1):
            option[j, i] = (
                1 / (1 + r) * (p * option[j, i + 1] + q * option[j + 1, i + 1])
            )
    return option


if __name__ == "__main__":
    print("Calculating example option price:")
    op_price = binomial_model(10, 100, 2, 0.04, 100,F)
    print(op_price[0][0])

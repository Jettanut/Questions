'''install package'''
#!pip install re
#!pip install os
#!pip install io
#!pip install pandas
#!pip install numpy
#!pip install seaborn
#!pip install matplotlib
#!pip install sklearn
#!pip install sweetviz
#!pip install tqdm

'''import package'''
import re
import os
import io
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split
#import sweetviz as sv
from tqdm import tqdm,trange

df = pd.read_csv('Desktop/loan/loan.csv') #Change
df['loan_status2'] = ''
for i in trange(len(df)):
  try:
    if df.loan_status.iloc[i] == 'Default':
      df.loan_status2.iloc[i] = 1
    else:
      df.loan_status2.iloc[i] = 0
  except:
    pass
#Rearrange columns    
columns = ['id', 'member_id', 'loan_amnt', 'funded_amnt', 'funded_amnt_inv',
       'term', 'int_rate', 'installment', 'grade', 'sub_grade', 'emp_title',
       'emp_length', 'home_ownership', 'annual_inc', 'verification_status',
       'issue_d', 'loan_status','loan_status2', 'pymnt_plan', 'url', 'desc', 'purpose',
       'title', 'zip_code', 'addr_state', 'dti', 'delinq_2yrs',
       'earliest_cr_line', 'inq_last_6mths', 'mths_since_last_delinq',
       'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal',
       'revol_util', 'total_acc', 'initial_list_status', 'out_prncp',
       'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp',
       'total_rec_int', 'total_rec_late_fee', 'recoveries',
       'collection_recovery_fee', 'last_pymnt_d', 'last_pymnt_amnt',
       'next_pymnt_d', 'last_credit_pull_d', 'collections_12_mths_ex_med',
       'mths_since_last_major_derog', 'policy_code', 'application_type',
       'annual_inc_joint', 'dti_joint', 'verification_status_joint',
       'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m',
       'open_il_6m', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il',
       'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc',
       'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m']

df = df[columns]
df.to_csv('C:/Users/TOT_User/Desktop/loan/loan2.csv',index=False) #Change
new_df = df.copy()
new_df2 = new_df[['id', 'member_id','loan_amnt','term','grade','sub_grade','emp_length','home_ownership','int_rate','verification_status','loan_status2']].dropna()

# Separate the numeric columns
cred_num = new_df2.select_dtypes(exclude=['object'])
# Separate non-numeric columns
cred_cat = new_df2.select_dtypes(include=['object'])
# One-hot encode the non-numeric columns only
cred_cat_onehot = pd.get_dummies(cred_cat)
# Union the numeric columns with the one-hot encoded columns
cr_loan = pd.concat([cred_num, cred_cat_onehot], axis=1)
print(cr_loan.columns)
print(cr_loan.head(10))

x = cr_loan.drop('loan_status2',axis=1)
y = cr_loan[['loan_status2']]


# Modeling
#pip install statsmodels
import statsmodels.api as sm
logit_model=sm.Logit(y,x)
result=logit_model.fit()
print(result.summary2())

pvalue = pd.DataFrame(result.pvalues,columns={'p_value'},)
print(pvalue)

# Creating the training and test sets
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=42)
logreg = LogisticRegression()
logreg.fit(X_train, y_train)

# Evaluation
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve

y_pred = logreg.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy_score(y_test, y_pred)))

confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)
print("\033[1m The result is telling us that we have: ",(confusion_matrix[0,0]+confusion_matrix[1,1]),"correct predictions\033[1m")
print("\033[1m The result is telling us that we have: ",(confusion_matrix[0,1]+confusion_matrix[1,0]),"incorrect predictions\033[1m")
print("\033[1m We have a total predictions of: ",(confusion_matrix.sum()))

print(classification_report(y_test, y_pred))

sns.set(style="whitegrid", color_codes=True)
logit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))
fpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])
plt.figure()
plt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic')
plt.legend(loc="lower right")
plt.savefig('Log_ROC')
plt.show()

# Deployment
cr_loan['PD'] = logreg.predict_proba(cr_loan[X_train.columns])[:,1]
cr_loan_PD = cr_loan[['id','member_id','PD']]
print(cr_loan_PD.describe())
print(cr_loan_PD.head(10))

# Setting the threshold
cr_loan['loan_status'] = cr_loan['PD'].apply(lambda x: 1 if x > 0.5 else 0)
cr_loan_PD['loan_status'] = cr_loan_PD['PD'].apply(lambda x: 1 if x > 0.5 else 0)
print(cr_loan_PD.head(10))









   
  
    
